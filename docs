# Enhanced AWS ETL Architecture

This repository contains documentation and a diagram for an enhanced AWS ETL (Extract, Transform, Load) architecture. It maintains the core flow from an on-premises Microsoft SQL Server database to Power BI visualization, with added security, governance, and observability features. The design follows AWS best practices.

## Architecture Diagram

![Architecture Diagram](images/architecture-diagram.jpg)  
*(Insert the path to your uploaded image here for a visual overview of the ETL flow with enhancements.)*

## Core ETL Flow

The architecture extracts data from the source, processes it through AWS services, and enables analytics and visualization. The flow is sequential and uses secure, encrypted pathways.

- **Source**: On-Premises Microsoft SQL Server Database  
  Acts as the initial data repository. Data is extracted via JDBC connections.

- **Ingestion**: Amazon S3 Bucket (Staging)  
  Raw data is uploaded to S3 for temporary storage. This serves as the landing zone before processing.

- **Processing**: AWS Glue (ETL Jobs)  
  Glue crawlers discover data in S3, and ETL jobs transform it (e.g., cleaning, aggregating, formatting).

- **Storage and Analytics**: Amazon Redshift (Data Warehousing)  
  Transformed data is loaded into Redshift clusters for structured querying and analysis.

- **Querying**: Amazon Athena  
  Enables serverless SQL queries directly on data in S3 or integrated with Redshift for ad-hoc analysis.

- **Visualization**: Power BI  
  Connects to Redshift or Athena endpoints to generate reports and dashboards.

### Data Movement Summary  
Data flows as follows:  
- MS SQL → S3 (initial upload).  
- S3 → Glue (crawling and transformation).  
- Glue → Redshift (loading).  
- Redshift/Athena → Power BI (query and visualization).

## Security Enhancements

Security is integrated at every layer to ensure data protection, access control, and compliance.

- **AWS Secrets Manager for JDBC**  
  Stores and manages credentials for JDBC connections from the on-premises MS SQL database. Secrets are rotated automatically, and access is audited. Integration avoids embedding credentials in code.

- **IAM Roles and Policies**  
  Least-privilege access is enforced for all services:  
  - Glue: Roles allow S3 read/write, Catalog operations, and Redshift loading.  
  - Redshift: Roles permit S3 data import and query execution.  
  - Athena: Policies control query access and workgroup configurations.  
  - Power BI: Uses federated IAM for secure endpoint access.

- **AWS KMS Encryption**  
  Provides server-side encryption:  
  - S3: Buckets use SSE-KMS for data at rest, with customer-managed keys.  
  - Redshift: Encrypts clusters, snapshots, and data blocks using envelope encryption.

## Governance Enhancements

Governance focuses on data management, access controls, and compliance.

- **AWS Glue Data Catalog**  
  Central metadata repository for databases, tables, and schemas from ETL processes. Crawlers populate the catalog automatically.

- **AWS Lake Formation**  
  Builds on Glue Catalog for fine-grained controls:  
  - Column-level permissions (e.g., restrict sensitive data).  
  - Data sharing across AWS accounts.  
  - Integration with IAM for hybrid access management.

## Observability and Auditing Enhancements

These features enable monitoring, logging, and compliance tracking.

- **AWS CloudTrail and AWS Config**  
  - CloudTrail: Logs API calls (e.g., Glue job executions, Redshift queries) for auditing, with trails stored in S3.  
  - AWS Config: Monitors resource configurations and changes, integrating with CloudTrail for compliance checks.

- **Amazon CloudWatch**  
  Collects and visualizes metrics:  
  - Glue: Monitors job runtime, success rates, and custom metrics.  
  - Redshift: Tracks CPU usage, query performance, and storage metrics.  
  Alarms trigger on thresholds, with dashboards for real-time insights.

## Operational Flow Notes

1. **Setup and Configuration**  
   - Provision resources in an AWS VPC for network isolation.  
   - Configure IAM roles and attach policies before deploying Glue jobs or Redshift clusters.  
   - Enable KMS keys and associate them with S3 and Redshift.

2. **Data Ingestion and Processing**  
   - Use JDBC with Secrets Manager to pull data from MS SQL to S3.  
   - Schedule Glue crawlers to catalog new data in S3.  
   - Run Glue ETL jobs to transform data and load to Redshift.

3. **Querying and Visualization**  
   - Athena queries can join S3 data with Redshift tables.  
   - Power BI connects via ODBC/JDBC drivers, authenticating through IAM.

4. **Monitoring and Maintenance**  
   - Set up CloudWatch alarms for anomalies (e.g., failed jobs).  
   - Review CloudTrail logs weekly for security audits.  
   - Use Lake Formation to update governance policies as data evolves.

5. **Best Practices**  
   - Regularly rotate secrets and KMS keys.  
   - Test failover with Redshift snapshots.  
   - Scale Glue jobs based on data volume for cost efficiency.

This architecture improves security, governance, and observability while preserving ETL efficiency.
